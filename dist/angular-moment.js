Angular.module("ngMoment", []);
var MomentModule;
(function (MomentModule) {
    var DateRangeFilter = /** @class */ (function () {
        function DateRangeFilter() {
        }
        DateRangeFilter.prototype.filter = function (start, end, options) {
            if (start == null)
                return null;
            if (!options)
                options = {};
            var mStart = moment(start);
            var mEnd = moment(end);
            if (mStart.isSame(mEnd))
                mEnd = mEnd.add(1, 'millisecond'); // bug in twix
            return mStart.twix(mEnd, options.allDay).format(options);
        };
        return DateRangeFilter;
    }());
    Angular.module("ngMoment").filter('daterange', DateRangeFilter);
})(MomentModule || (MomentModule = {}));
var MomentModule;
(function (MomentModule) {
    var DaysAgoFilter = /** @class */ (function () {
        function DaysAgoFilter() {
            this.today = moment().startOf('day');
        }
        DaysAgoFilter.prototype.filter = function (date) {
            var compDate = moment(date);
            if (compDate.diff(this.today, 'days') === 0)
                return 'today';
            return compDate.from(this.today);
        };
        return DaysAgoFilter;
    }());
    Angular.module("ngMoment").filter('daysago', DaysAgoFilter);
})(MomentModule || (MomentModule = {}));
var MomentModule;
(function (MomentModule) {
    var MomentFilter = /** @class */ (function () {
        function MomentFilter() {
        }
        MomentFilter.prototype.filter = function (date, format, pattern) {
            if (date == null)
                return "no date";
            return moment(date, pattern).format(format);
        };
        return MomentFilter;
    }());
    Angular.module("ngMoment").filter('moment', MomentFilter);
})(MomentModule || (MomentModule = {}));
var MomentModule;
(function (MomentModule) {
    var TimeAgoFilter = /** @class */ (function () {
        function TimeAgoFilter() {
        }
        TimeAgoFilter.prototype.filter = function (date) {
            return moment(date).fromNow();
        };
        return TimeAgoFilter;
    }());
    Angular.module("ngMoment").filter('timeago', TimeAgoFilter);
})(MomentModule || (MomentModule = {}));
var MomentModule;
(function (MomentModule) {
    var TimeRangeFilter = /** @class */ (function () {
        function TimeRangeFilter() {
        }
        TimeRangeFilter.prototype.filter = function (start, end, options) {
            if (start == null || end == null)
                return "";
            if (!options)
                options = {};
            options.hideDate = true;
            var mStart = this.getMoment(start);
            var mEnd = this.getMoment(end);
            if (mStart.isSame(mEnd))
                mEnd = mEnd.add(1, 'millisecond'); // bug in twix
            return mStart.twix(mEnd, options.allDay).format(options);
        };
        TimeRangeFilter.prototype.getMoment = function (value) {
            var isoTime = "HH:mm:ss", isoDate = "YYYY-MM-DDTHH:mm:ss";
            var m = (value instanceof Date) ? moment(value.getTime()) : moment(value, [isoDate, isoTime]);
            return m;
        };
        return TimeRangeFilter;
    }());
    Angular.module("ngMoment").filter('timerange', TimeRangeFilter);
})(MomentModule || (MomentModule = {}));
//# sourceMappingURL=data:application/json;base64,